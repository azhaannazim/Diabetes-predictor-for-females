# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dzSKVRMNbSFd7htT-_vPXuvxe-o3-ZCV
"""

import pickle
import pandas as pd
from schemas import DiabetesInput,DiabetesPredictionResult
from fastapi import HTTPException

with open('voting_classififer.pkl','rb') as f:
  model=pickle.load(f)

with open('scaler.pkl','rb') as f:
  scaler=pickle.load(f)

with open('feature_columns.pkl','rb') as f:
  feature_columns=pickle.load(f)

with open("imputer.pkl", "rb") as f:
    imputer = pickle.load(f)

cols_with_zeros = ["Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI"]

from fastapi import FastAPI
app=FastAPI(
    title="Diabetes Prediction API",
    description="API for predicting diabetes using an ensemble model",
    version="1.0.0",
)

@app.get("/")
def home():
  return {"message":"Diabetes Prediction API is running"}

MODEL_VERSION="1.0.0"

@app.get("/health")
def health_check():
  return{
    'status':'OK',
    'version':MODEL_VERSION,
    'model_loaded':model is not None
  }

@app.post("/predict",response_model=DiabetesPredictionResult)
def predict_diabetes(user_input: DiabetesInput):
  try:
    input_list=user_input.to_model_input()
    input_df=pd.DataFrame([input_list],columns=feature_columns)
    input_df[cols_with_zeros] = imputer.transform(input_df[cols_with_zeros])

    input_scaled = scaler.transform(input_df)
    input_scaled_df = pd.DataFrame(input_scaled, columns=feature_columns)
    prediction=model.predict(input_scaled_df)[0]
    probability=model.predict_proba(input_scaled_df)[0][1]

    if prediction==1:
      message="High risk of diabetes"
    else:
      message="Low risk of diabetes"

    return{
        "prediction":int(prediction),
        "probability":round(probability,2),
        "message":message
    }

  except Exception as e:
    raise HTTPException(status_code=500, detail=f"Prediction failed: {str(e)}")
