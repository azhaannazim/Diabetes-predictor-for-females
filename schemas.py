# -*- coding: utf-8 -*-
"""schemas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zmznQO-ZU2ERs4IspmTGLcYl0098M63_
"""

from pydantic import BaseModel, Field, field_validator
from typing import Optional, Annotated
import numpy as np


class DiabetesInput(BaseModel):
    # Mandatory fields
    Pregnancies: Annotated[int, Field(ge=0, description="Number of times pregnant")]
    Weight: Annotated[float, Field(gt=0, description="Weight in kilograms")]
    Height: Annotated[float, Field(gt=0, description="Height in meters")]
    Age: Annotated[int, Field(ge=1, description="Age in years")]

    # Optional fields
    Glucose: Optional[Annotated[float, Field(ge=0, description="Plasma glucose concentration")]] = None
    BloodPressure: Optional[Annotated[float, Field(ge=0, description="Diastolic blood pressure (mm Hg)")]] = None
    SkinThickness: Optional[Annotated[float, Field(ge=0, description="Triceps skinfold thickness (mm)")]] = None
    Insulin: Optional[Annotated[float, Field(ge=0, description="2-Hour serum insulin (mu U/ml)")]] = None
    DiabetesPedigreeFunction: Optional[Annotated[float, Field(ge=0, description="Diabetes pedigree function score")]] = None

    @field_validator("Height", "Weight")
    def check_positive(cls, v):
        if v <= 0:
            raise ValueError("Height and Weight must be positive numbers")
        return v

    def compute_bmi(self) -> float:
        """Compute BMI from weight and height."""
        return round(self.Weight / (self.Height ** 2), 2)

    def to_model_input(self):
        return [
            self.Pregnancies,
            self.Glucose if self.Glucose is not None else np.nan,
            self.BloodPressure if self.BloodPressure is not None else np.nan,
            self.SkinThickness if self.SkinThickness is not None else np.nan,
            self.Insulin if self.Insulin is not None else np.nan,
            self.compute_bmi(),
            self.DiabetesPedigreeFunction if self.DiabetesPedigreeFunction is not None else 0,
            self.Age,
        ]


class DiabetesPredictionResult(BaseModel):
    prediction: Annotated[int, Field(
        description="Predicted class (0 = Low risk, 1 = High risk)",
        example=1
    )]
    probability: Annotated[float, Field(
        ge=0, le=1,
        description="Probability of high risk of diabetes (0 to 1)",
        example=0.85
    )]
    message: Annotated[str, Field(
        description="Human-readable risk message",
        example="High risk of diabetes"
    )]
